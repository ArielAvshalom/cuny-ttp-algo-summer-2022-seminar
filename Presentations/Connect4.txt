Connect4
Win by landing 4 of the same color in a row, column or diagonal
Place down a piece into the lowest unoccupied place on the map

What sort of data structures would make sense here?

A 2-d array.
What about a graph? Is there any benefit in creating this as a fluid type of graph?
Can a 2-d array and a graph be easily converted?

[   [0,0,0,0,0,0,0]
    [0,0,0,0,0,0,0]
    [0,0,0,0,0,0,0]
    [0,0,0,0,0,0,0]
    [0,0,0,0,0,0,0]
    [0,0,0,0,0,0,0]
]
array[3][3]
array[4][3]

if down:
    our_array_position_hori our_array_position_vert =left_right[1], up_down[1]

left_right =    [0,0,1,-1]
up_down =       [1,-1,0,0]

Let's say you're at an interview, do you propose to the interviewer, let's make a this a graph?

Give me benefits or negatives?

It's a whole lot of work to convert something like this into a graph...

#################IN THE INTERVIEW TALKING POINT>>>>>
    A good talking point that your candidate has is that they spoke about the data structure they need to use.

    Our conversation above was about graphs vs 2D arrays. The 2D has benefits. At this point when developing the question, think about all potential data structures you can use and why they might be or might not be useful.

    Building a question requires a much deeper understanding than solving it.

    If the candidate mentions ideal data structures and has a conversation, then they should get a higher rating in communication and the pre-code outline

#################<<<<<<<<<<<<<<<<<<<

##########################################
INTERVIEW PART 1

First problem 0.1: trying to see if the current input is valid. Generally this won't be asked, but checking input validity is pretty important.

What is input validity? 
    Whenever seeing a non-zero entity, the value below must be non zero.

    You have the wrong array bounds

    You have more than 0,1,2 as inputs

They have to figure out a way to solve that problem...

"000000000012222222222222211111111111111121"

    Convert the input into a 2d array and return True if the input is correct and false otherwise

    You start with the earliest row and start a new row every 7 values.

Incorrect examples:
"000000000012222222222222211111111111111121" -zero below
"012222222222222211111111111111121" -below array bound
"1111110000122?2222222222211111111111111121"

Correct example:
"000000000000000000000000000000000000000000"
"101111120101121020100000000000000000000000"

set_of_acceptable_values = (0,1,2)

//TRY TO SOLVE THIS ON YOUR OWN

0.2: put it into a 2D array
    --use a mod 7 or just append to an array and flip the array

    [
        [1,2,3,4,5,6,7]
        [8,9,10,11,12,13,14]
    ]

    Either revese the actual array spots and make 0 be 5 etc or start from the end of the original input array

The above questions are extremly basic and should covered in the first 10 minutes of coding tops.

############INPORTANT POINT<<<<<<<<<<<<<<<

If the candidate passes through section 1, their coding skills should be at least a 2, no longer a 1.

This doesn't require algorithms just yet, it's only predicate logic.

#####################>>>>>>>>>>>>>>>>>>

#################################################
INTERVIEW PART 2

The next questions to ask are the following:

1.1: How do you add a piece to the game?
--Place a piece and it should go down to the lowest zero element and replace it. But how do you do that?

Considerations: 

    you can't put a piece in a fully finished column.
        How do you check for that?

    How do you do this is O(column) time?
        One of your inputs will be the column.

    How do you make sure the right player is playing right now?
        There has to be either n-1 or even configuration of player pieces

1.2: How do you reconfigure the game to have more than 2 players?

    This question is powerful because it tests to see the elasticity of the programmer. Can they exit out of hardcoding things?

1.3

#####################<<<<<<<<<<<<<<<<
If people pass 1-2 of the questions above

Their algorithms are about a 3/5
Their coding is also 3.5/5
And their data structures are 3/4


NOTE these numbers aren't hard numbers, they're just suggestions because as a interviewer you can see a lot of things you might like or dislike. 
######################>>>>>>>>>>>>>>>>>>


2.1: How do you check and see if you won or not won?

2.2: Is the game winnable?
